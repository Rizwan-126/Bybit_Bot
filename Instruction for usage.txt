API_KEY = "Enter your api key here"
API_SECRET = "Enter your api secret here"
IS_TEST = False #set to True if you  are using testnet



{
    "type": "Market",
    "side": "Buy",
    "amount": "10",
    "symbol": "BTCUSD",
    "stopLoss": 3,
    "leverage": "3",
    "trailingStop":"None",
    "takeProfit":1,
    "key": "f7dea65b1c167651e830756a94f13d07f0b8c26b6a46f76f2afed966"
}



Install pipenv sudo apt install pipenv

Once pipenv is installed, I recommend that you get familiar with it.

Navigate to the folder where you cloned the repo. You should see Pipfile and Pipfile.lock files.

Run command pipenv install

The dependencies required to get started should now be installed. Check by running command pipenv graph - You should see flask and ccxt.

If you want to install any other dependencies, or if you get an error that you're missing a depedency, simply use command pipenv install
Starting the virtual environment: pipenv shell

Starting the flask app: python webhook-bot.py

The Pipfile contains required packages, libraries to run the script. They will be considered when running webhook-bot.py. On cmd run pip install ccxt then; pip install flask then; python webhook-bot.py Starting a Server

First, we need to start the server that will listen for tradingview's webhooks.

To do that, we're going to use ngrok and flask (python)

Open a new CMD propmpt and navigate to example: C:\Users\ICT\Documents\projects\Bybitpy; in your case it might be different.

Start the flask server by running webhook-bot.py

This will create a server on your device, running on the port 5000.

Next, run ngrok http 5000 with the command line. This creates a public address for your app (in this case our webhooks bot). Copy the address ngrok gives you in the console (should look like randomnumbers.ngrok.io). Paste it into your browser and verify that everything is working; you should see "online" in the browser. Sending Trades

Once the server is displaying "online" you can now start sending trades via tradingview's webhooks. To do this, first copy the script in the pinescript_test.txt file. This is a simple script that will send an alert every minute.

Paste the pinescript in the pinescript editor and add it to your chart. Next, create a new alert. Set the alert to trigger once per minute. Check "webhooks" at the bottom of the new alert window and paste in your ngrok URL. Be sure to add /webhook at the end of it! i.e. random.ngrok.io/webhook

In your ngrok console, you should start seeing POST requests made to the server from tradingview, this means its working!
Now, we can send alerts with the order information (in the body of the alert message)

The data for the alert will look like json, here is an example as we indicated previously.

{"type": "Market", "side": "Buy", "amount": "10", "symbol": "BTCUSD", "stopLoss": "1", "leverage": "3", "key": "f7dea65b1c167651e830756a94f13d07f0b8c26b6a46f76f2afed966"} One thing to note, the key is generated by the get_token function in the auth.py script. I feel this adds just a bit of extra security, better safe than sorry! I would recommend changing the pin to something else. 
The key from the alert has to match the key on your server or the order won't go through.

Note that the json script is generated by the bot. Edit the auth.py file and replace line 8: PIN; 1234 with a passcode of your choice. Go to command prompt and execute the generate_alert_message.py and follow the propmpts on screen to fill details of your JSON taking note of the market symbols we generated previously. Copy the json file generated and paste in the message section of TradingView alerts. If market symbols are wrong, Bybit will execute an error.
